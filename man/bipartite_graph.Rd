% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bipartite_graph.R
\name{bipartite_graph}
\alias{bipartite_graph}
\title{Plotting a bipartite graph}
\usage{
bipartite_graph(
  datadir,
  filename,
  paintlinks = TRUE,
  print_to_file = FALSE,
  plotsdir = "plot_results/",
  orderkcoremaxby = "kradius",
  style = "legacy",
  guild_gap_increase = 1,
  flip_results = FALSE,
  aspect_ratio = 1,
  alpha_level = 0.2,
  color_guild_a = c("#4169E1", "#00008B"),
  color_guild_b = c("#F08080", "#FF0000"),
  color_link = "slategray3",
  alpha_link = 0.5,
  size_link = 0.5,
  lsize_kcoremax = 3.5,
  lsize_kcore1 = 2.5,
  lsize_legend = 4,
  lsize_core_box = 2.5,
  labels_color = c(),
  hide_plot_border = TRUE,
  corebox_border_size = 0.2,
  label_strguilda = "",
  label_strguildb = "",
  landscape_plot = TRUE,
  backg_color = "white",
  show_title = TRUE,
  show_legend = "TOP",
  file_name_append = "",
  svg_scale_factor = 10,
  weighted_links = "none",
  square_nodes_size_scale = 1,
  move_all_SVG_up = 0,
  move_all_SVG_right = 0,
  progress = NULL
)
}
\arguments{
\item{datadir}{the name of the file of the interaction matrix}

\item{filename}{the file with the interaction matrix}

\item{print_to_file}{if set to FALSE the plot is displayed in the R session window}

\item{plotsdir}{the directory where the plot is stored}

\item{orderkcoremaxby}{sets order of kcoremax nodes, by kradius or kdegree}

\item{style}{bipartite representation style: legacy, kcoreorder, chilopod}

\item{guild_gap_increase}{controls the disptance between guild rows}

\item{flip_results}{displays the graph in portrait configuration}

\item{aspect_ratio}{ziggurat plot default aspect ratio}

\item{alpha_level}{transparency for ziggurats' filling}

\item{color_guild_a}{default filling for nodes of guild_a}

\item{color_guild_b}{default filling for nodes of guild_b}

\item{color_link}{default links color}

\item{alpha_link}{link transparency}

\item{size_link}{width of the links}

\item{lsize_kcoremax}{nodes in kshell max label size}

\item{lsize_kcore1}{labels of nodes in kshell 1}

\item{lsize_legend}{legend label size}

\item{labels_color}{default label colors}

\item{hide_plot_border}{hide border around the plot}

\item{corebox_border_size}{width of kshell boxes}

\item{label_strguilda}{string labels of guild a}

\item{label_strguildb}{string labels of guild b}

\item{landscape_plot}{paper landscape configuration}

\item{backg_color}{plot background color}

\item{show_title}{show plot title}

\item{show_legend}{show plot legend position}

\item{file_name_append}{a label that the user may append to the plot file name for convenience}

\item{svg_scale_factor}{only for interactive apps, do not modify}

\item{weighted_links}{function to add link weight: 'none', 'log10' , 'ln', 'sqrt'}

\item{square_nodes_size_scale}{scale nodes area of kcore1 and outsiders}

\item{move_all_SVG_up}{move up all the SVG plot by this fraction, useful to crop upper white space}

\item{move_all_SVG_right}{move rightwards all the SVG plot by this fraction, useful to crop right white space}

\item{progress}{only for interactive apps, do not modifiy}
}
\description{
This function plots the ziggurat graph of a bipartite network. Configuration parameters and
results are stored in a global environment called bpp. This environment is not destroyed
after the function is executed, so the developer can store it in a configuration file, retrieve
network analysis variables and so on. If a new bipartite_graph is called, bpp is destroyed and
created again for the new plot. Plotting options are explained in the user manual.
}
\examples{
bipartite_graph("data/","M_PL_001.csv",plotsdir="grafresults/",print_to_file = TRUE)
}
